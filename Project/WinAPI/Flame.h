//#pragma once
//#include "GameNode.h"
/*
실습 겸 과제1. 로켓에 Flame 이미지 추가
-Flame 이미지는 프레임으로 렌더

-Flame 클래스에는 로켓에 대한 정보가 있으면 안되며 MainGame 또한 Flame을 알 필요가 없다.

==========================================================================================

과제1. 팀 포트폴리오 만들 게임 추려오기
-팀원들이랑 상의해서 최종 후보군을 추려본다.
ㄴ 게임을 정해 오라는 얘기는 아니지만 최종 후보군 최소 3개를 정해온다.

기준1. 우리 팀이 만들수 있느냐?
기준2. 팀원들이 적절하게 업무를 분배할 수 있는가?
기준3. 정말 이 게임 만들고 싶은가?	

과제2. 로켓 미사일 발사
-미완성 함수를 완성하고 로켓이 미사일을 발사한다.
-미사일 이미지는 당연히 프레임 렌더로 출력

과제3. 타일맵 만들기
-사용자가 입력한 숫자로 타일맵을 그린다 (최대 사이즈: 100)
	ㄴ EX) 20을 입력하면 20 X 20 사이즈의 타일이 화면에 그려진다.
	ㄴ 초기식에서 할당을 하고 시작해도 인정은 해준다.

-타일맵 안에는 랜덤한 위치에 이미지 2장이 들어있다.
-이미지는 매번 타일맵을 그릴때마다 위치가 바뀌여야 하고 그려진 이미지는 마우스로 클릭 할 수 있어야 한다,
또한 옮길수 있어야 한다.

※ 과제는 vector를 반드시 사용한다.

==========================================================================================

실습겸 과제1. 로켓 무장 변경 추가
-F1: 일반 미사일
-F2: 산탄
-F3: 미니 로켓 생성(로켓 양옆에 추가로 달아서 미사일 발사하면 같이 발사)
-F4: 실드
-F5: 유도 미사일
-F6: 레이저
-F7: 블랙홀

Question
7. struct / class 차이점
struct의 접근 지시자는 public으로 통일되어 있지만
class 는 멤버별로 각각 다른 접근 지시자를 지정해줄수있다

8. new / Malloc 개념 및 차이점


재할당이 많이 이루어져야 하는 경우 malloc이 편하다
9.C++ / C# 차이점
1. malloc은 라이브러리 제공 함수로, stdlib.h 을 include 해주어야 사용 가능하지만, new는 기본으로 제공하는 키워드이므로 별도의 라이브러리 추가 없이 바로 사용 가능합니다.



2. malloc은 사이즈를 매개변수로 받고, 리턴타입이 void*형이므로 sizeof()와 캐스팅을 활용해야 쉬운 코딩이 가능합니다. 반면에 new는 할당할 타입을 지정하면 알아서 할당할 타입의 포인터로 넘어오기 때문에 할당할 타입과 같은 타입의 포인터 변수로 받아오기만 하면 됩니다.



3. malloc은 메모리를 동적으로 할당하는 것만이 목적이기때문에 초기값을 지정해줄 수 없지만, new는 할당과 동시에 초기화가 가능합니다.



4. new는 생성자를 자동으로 호출합니다. 생성자는 객체를 자동으로 초기화해주는 함수로, malloc과 new의 가장 큰 차이점입니다.

new 는 생성자와 소멸자를 호출 해야한다
10. 포인터란 무엇인가 (Call By Value, Call By Reference)

11. 포인터와 참조자의 차이점

과제2. 적 움직임 구현
-각각의 객체가 전부 다르게 움직여야 한다.

==================================================================================================================
과제1. 미사일 충돌 처리
ㄴ 내가 발사한 미사일로 적 제거

-객체 지향을 생각한다.

과제2. 체력바 구현

-로켓과 적의 체력바를 구현한다.

-체력바는 각각의 객체위에 띄운다.

*/

//
//
//
//#define FLAME_COUNT 4.0f
//
//class Flame : public GameNode
//{
//private:
//	Image* _image;
//	RECT _rc;
//
//	float* _x;
//	float* _y;
//	float _flameTick;
//
//public:
//	HRESULT init(const char* fileName, float* x, float* y);
//	void release(void);
//	void update(void);
//	void render(void);
//
//	Flame();
//	~Flame();
//};
//
